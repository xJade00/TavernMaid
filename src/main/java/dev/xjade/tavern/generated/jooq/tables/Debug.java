/*
 * This file is generated by jOOQ.
 */
package dev.xjade.tavern.generated.jooq.tables;

import dev.xjade.tavern.generated.jooq.Keys;
import dev.xjade.tavern.generated.jooq.Public;
import dev.xjade.tavern.generated.jooq.tables.records.DebugRecord;
import java.time.LocalDateTime;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Debug extends TableImpl<DebugRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.debug</code> */
  public static final Debug DEBUG = new Debug();

  /** The class holding records for this type */
  @Override
  public Class<DebugRecord> getRecordType() {
    return DebugRecord.class;
  }

  /** The column <code>public.debug.id</code>. */
  public final TableField<DebugRecord, Long> ID =
      createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /** The column <code>public.debug.server</code>. */
  public final TableField<DebugRecord, Long> SERVER =
      createField(DSL.name("server"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>public.debug.description_compressed</code>. */
  public final TableField<DebugRecord, byte[]> DESCRIPTION_COMPRESSED =
      createField(DSL.name("description_compressed"), SQLDataType.BLOB.nullable(false), this, "");

  /** The column <code>public.debug.time</code>. */
  public final TableField<DebugRecord, LocalDateTime> TIME =
      createField(
          DSL.name("time"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  private Debug(Name alias, Table<DebugRecord> aliased) {
    this(alias, aliased, null);
  }

  private Debug(Name alias, Table<DebugRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.debug</code> table reference */
  public Debug(String alias) {
    this(DSL.name(alias), DEBUG);
  }

  /** Create an aliased <code>public.debug</code> table reference */
  public Debug(Name alias) {
    this(alias, DEBUG);
  }

  /** Create a <code>public.debug</code> table reference */
  public Debug() {
    this(DSL.name("debug"), null);
  }

  public <O extends Record> Debug(Table<O> child, ForeignKey<O, DebugRecord> key) {
    super(child, key, DEBUG);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public Identity<DebugRecord, Long> getIdentity() {
    return (Identity<DebugRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<DebugRecord> getPrimaryKey() {
    return Keys.DEBUG_PKEY;
  }

  @Override
  public Debug as(String alias) {
    return new Debug(DSL.name(alias), this);
  }

  @Override
  public Debug as(Name alias) {
    return new Debug(alias, this);
  }

  @Override
  public Debug as(Table<?> alias) {
    return new Debug(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Debug rename(String name) {
    return new Debug(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Debug rename(Name name) {
    return new Debug(name, null);
  }

  /** Rename this table */
  @Override
  public Debug rename(Table<?> name) {
    return new Debug(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<Long, Long, byte[], LocalDateTime> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function4<? super Long, ? super Long, ? super byte[], ? super LocalDateTime, ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function4<? super Long, ? super Long, ? super byte[], ? super LocalDateTime, ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
