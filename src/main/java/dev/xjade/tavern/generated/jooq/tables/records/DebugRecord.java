/*
 * This file is generated by jOOQ.
 */
package dev.xjade.tavern.generated.jooq.tables.records;

import dev.xjade.tavern.generated.jooq.tables.Debug;
import java.time.LocalDateTime;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DebugRecord extends UpdatableRecordImpl<DebugRecord>
    implements Record4<Long, Long, byte[], LocalDateTime> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>public.debug.id</code>. */
  public void setId(Long value) {
    set(0, value);
  }

  /** Getter for <code>public.debug.id</code>. */
  public Long getId() {
    return (Long) get(0);
  }

  /** Setter for <code>public.debug.server</code>. */
  public void setServer(Long value) {
    set(1, value);
  }

  /** Getter for <code>public.debug.server</code>. */
  public Long getServer() {
    return (Long) get(1);
  }

  /** Setter for <code>public.debug.description_compressed</code>. */
  public void setDescriptionCompressed(byte[] value) {
    set(2, value);
  }

  /** Getter for <code>public.debug.description_compressed</code>. */
  public byte[] getDescriptionCompressed() {
    return (byte[]) get(2);
  }

  /** Setter for <code>public.debug.time</code>. */
  public void setTime(LocalDateTime value) {
    set(3, value);
  }

  /** Getter for <code>public.debug.time</code>. */
  public LocalDateTime getTime() {
    return (LocalDateTime) get(3);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record1<Long> key() {
    return (Record1) super.key();
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  @Override
  public Row4<Long, Long, byte[], LocalDateTime> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<Long, Long, byte[], LocalDateTime> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<Long> field1() {
    return Debug.DEBUG.ID;
  }

  @Override
  public Field<Long> field2() {
    return Debug.DEBUG.SERVER;
  }

  @Override
  public Field<byte[]> field3() {
    return Debug.DEBUG.DESCRIPTION_COMPRESSED;
  }

  @Override
  public Field<LocalDateTime> field4() {
    return Debug.DEBUG.TIME;
  }

  @Override
  public Long component1() {
    return getId();
  }

  @Override
  public Long component2() {
    return getServer();
  }

  @Override
  public byte[] component3() {
    return getDescriptionCompressed();
  }

  @Override
  public LocalDateTime component4() {
    return getTime();
  }

  @Override
  public Long value1() {
    return getId();
  }

  @Override
  public Long value2() {
    return getServer();
  }

  @Override
  public byte[] value3() {
    return getDescriptionCompressed();
  }

  @Override
  public LocalDateTime value4() {
    return getTime();
  }

  @Override
  public DebugRecord value1(Long value) {
    setId(value);
    return this;
  }

  @Override
  public DebugRecord value2(Long value) {
    setServer(value);
    return this;
  }

  @Override
  public DebugRecord value3(byte[] value) {
    setDescriptionCompressed(value);
    return this;
  }

  @Override
  public DebugRecord value4(LocalDateTime value) {
    setTime(value);
    return this;
  }

  @Override
  public DebugRecord values(Long value1, Long value2, byte[] value3, LocalDateTime value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached DebugRecord */
  public DebugRecord() {
    super(Debug.DEBUG);
  }

  /** Create a detached, initialised DebugRecord */
  public DebugRecord(Long id, Long server, byte[] descriptionCompressed, LocalDateTime time) {
    super(Debug.DEBUG);

    setId(id);
    setServer(server);
    setDescriptionCompressed(descriptionCompressed);
    setTime(time);
    resetChangedOnNotNull();
  }
}
