/*
 * This file is generated by jOOQ.
 */
package dev.xjade.tavern.generated.jooq.tables;

import dev.xjade.tavern.generated.jooq.Keys;
import dev.xjade.tavern.generated.jooq.Public;
import dev.xjade.tavern.generated.jooq.tables.records.LoggingRecord;
import java.time.LocalDateTime;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Logging extends TableImpl<LoggingRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.logging</code> */
  public static final Logging LOGGING = new Logging();

  /** The class holding records for this type */
  @Override
  public Class<LoggingRecord> getRecordType() {
    return LoggingRecord.class;
  }

  /** The column <code>public.logging.id</code>. */
  public final TableField<LoggingRecord, Long> ID =
      createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /** The column <code>public.logging.category</code>. */
  public final TableField<LoggingRecord, String> CATEGORY =
      createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>public.logging.variables</code>. */
  public final TableField<LoggingRecord, JSONB> VARIABLES =
      createField(DSL.name("variables"), SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.logging.description</code>. */
  public final TableField<LoggingRecord, String> DESCRIPTION =
      createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>public.logging.time</code>. */
  public final TableField<LoggingRecord, LocalDateTime> TIME =
      createField(
          DSL.name("time"),
          SQLDataType.LOCALDATETIME(6)
              .nullable(false)
              .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)),
          this,
          "");

  /** The column <code>public.logging.server</code>. */
  public final TableField<LoggingRecord, Long> SERVER =
      createField(DSL.name("server"), SQLDataType.BIGINT, this, "");

  private Logging(Name alias, Table<LoggingRecord> aliased) {
    this(alias, aliased, null);
  }

  private Logging(Name alias, Table<LoggingRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /** Create an aliased <code>public.logging</code> table reference */
  public Logging(String alias) {
    this(DSL.name(alias), LOGGING);
  }

  /** Create an aliased <code>public.logging</code> table reference */
  public Logging(Name alias) {
    this(alias, LOGGING);
  }

  /** Create a <code>public.logging</code> table reference */
  public Logging() {
    this(DSL.name("logging"), null);
  }

  public <O extends Record> Logging(Table<O> child, ForeignKey<O, LoggingRecord> key) {
    super(child, key, LOGGING);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public Identity<LoggingRecord, Long> getIdentity() {
    return (Identity<LoggingRecord, Long>) super.getIdentity();
  }

  @Override
  public UniqueKey<LoggingRecord> getPrimaryKey() {
    return Keys.LOGGING_PKEY;
  }

  @Override
  public Logging as(String alias) {
    return new Logging(DSL.name(alias), this);
  }

  @Override
  public Logging as(Name alias) {
    return new Logging(alias, this);
  }

  @Override
  public Logging as(Table<?> alias) {
    return new Logging(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Logging rename(String name) {
    return new Logging(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Logging rename(Name name) {
    return new Logging(name, null);
  }

  /** Rename this table */
  @Override
  public Logging rename(Table<?> name) {
    return new Logging(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Long, String, JSONB, String, LocalDateTime, Long> fieldsRow() {
    return (Row6) super.fieldsRow();
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
  public <U> SelectField<U> mapping(
      Function6<
              ? super Long,
              ? super String,
              ? super JSONB,
              ? super String,
              ? super LocalDateTime,
              ? super Long,
              ? extends U>
          from) {
    return convertFrom(Records.mapping(from));
  }

  /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
  public <U> SelectField<U> mapping(
      Class<U> toType,
      Function6<
              ? super Long,
              ? super String,
              ? super JSONB,
              ? super String,
              ? super LocalDateTime,
              ? super Long,
              ? extends U>
          from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
